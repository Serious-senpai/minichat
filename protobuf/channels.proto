syntax = "proto3";

import "users.proto";

package p_channels;

service ChannelService {
    rpc CreateChannel(PCreateChannelRequest) returns (PChannel);
    rpc CreateMessage(PCreateMessageRequest) returns (PMessage);
    rpc History(PHistoryQuery) returns (PHistoryQueryResult);
    rpc Query(PChannelQuery) returns (PChannelQueryResult);
}

message PChannel {
    int64 id = 1;
    string name = 2;
    string description = 3;
    p_users.PUser owner = 4;
}

message PMessage {
    int64 id = 1;
    string content = 2;
    p_users.PUser author = 3;
    PChannel channel = 4;
}

message PCreateChannelRequest {
    string name = 1;
    string description = 2;
    int64 owner_id = 3;
}

message PCreateMessageRequest {
    string content = 2;
    int64 author_id = 3;
    int64 channel_id = 4;
}

message PHistoryQuery {
    /** ID of the channel to query history */
    int64 id = 1;

    /** Whether to return the newest messages first */
    bool newest = 2;

    /**
        Query snowflake ID smaller than or equal to this ID.
        When set to 0, implementation should use the greatest 64-bit signed integer.
    */
    int64 before_id = 3;

    /** Query snowflake ID greater than or equal to this ID */
    int64 after_id = 4;

    /** Maximum number of messages to return */
    int32 limit = 50;
}

message PHistoryQueryResult {
    repeated PMessage messages = 1;
}

message PChannelQuery {
    /** ID of the channel to query, set to 0 to query all channels */
    int64 id = 1;
}

message PChannelQueryResult {
    repeated PChannel channels = 1;
}
